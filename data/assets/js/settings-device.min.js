let deviceNameField,deviceLanguageSelect,diagnoseBtn,sensorUnitSelect,sensorUpdateInterval,sensorThresholdTemp,sensorThresholdHumidity,sensorThresholdPressure,sensorThresholdLight,externalSetCheckbox,externalSensorGroup,externalSensorSelect,combineSensorsCheckbox,buzzerSetCheckbox,buzzerGroup,buzzerTuneSelect,buzzerPlayBtn,buzzerOpeningCheckbox,buzzerClosingCheckbox,accessLoggingCheckbox,logLevelSelect,saveBtn,resetBtn,modalSettingsSaved,modalReset,modalCloseBtn,resetModalBtn;document.addEventListener("DOMContentLoaded",init);const savedToken=localStorage.getItem("token");async function init(){cacheElements(),bindEvents(),initModal(),await loadSettings()}function cacheElements(){deviceNameField=document.getElementById("pref-device-name"),deviceLanguageSelect=document.getElementById("pref-device-language"),diagnoseBtn=document.getElementById("btn-diagnose"),sensorUnitSelect=document.getElementById("pref-device-sensor-unit"),sensorUpdateInterval=document.getElementById("pref-device-sensor-update"),sensorThresholdTemp=document.getElementById("pref-device-threshold-temp"),sensorThresholdHumidity=document.getElementById("pref-device-threshold-hum"),sensorThresholdPressure=document.getElementById("pref-device-threshold-pres"),sensorThresholdLight=document.getElementById("pref-device-threshold-lux"),externalSetCheckbox=document.getElementById("pref-device-sensor-external-set"),externalSensorGroup=document.getElementById("pref-device-sensor-external-group"),externalSensorSelect=document.getElementById("pref-device-sensor-external"),combineSensorsCheckbox=document.getElementById("pref-device-sensor-external-combine"),buzzerSetCheckbox=document.getElementById("pref-device-buzzer-set"),buzzerGroup=document.getElementById("pref-device-buzzer-group"),buzzerTuneSelect=document.getElementById("pref-device-buzzer-tune"),buzzerPlayBtn=document.getElementById("btn-buzzer-play"),buzzerOpeningCheckbox=document.getElementById("pref-device-buzzer-opening"),buzzerClosingCheckbox=document.getElementById("pref-device-buzzer-closing"),accessLoggingCheckbox=document.getElementById("pref-device-log-level"),logLevelSelect=document.getElementById("pref-device-log-level"),saveBtn=document.getElementById("btn-save"),resetBtn=document.getElementById("btn-reset"),modalCloseBtn=document.getElementById("btn-modal-close"),resetModalBtn=document.getElementById("btn-reset-modal")}function bindEvents(){saveBtn.addEventListener("click",handleSave),diagnoseBtn.addEventListener("click",downloadDiagnose),deviceLanguageSelect.addEventListener("change",changeLanguage),externalSetCheckbox.addEventListener("change",toggleExternalSensor),buzzerSetCheckbox.addEventListener("change",toggleBuzzerSet),buzzerPlayBtn.addEventListener("click",buzzerPlay),resetBtn.addEventListener("click",showResetModal),modalCloseBtn.addEventListener("click",(()=>modalReset.hide())),resetModalBtn.addEventListener("click",handleReset)}function initModal(){const e=document.getElementById("modal-saved");modalSettingsSaved=new bootstrap.Modal(e,{keyboard:!1});const t=document.getElementById("modal-reset");modalReset=new bootstrap.Modal(t,{keyboard:!1})}async function loadSettings(){try{const e=await fetch("/api/settings/device",{headers:{Authorization:savedToken}}),t=await e.json();deviceNameField.value=t.name||"",deviceLanguageSelect.value=t.lang||"en",sensorUnitSelect.value=(t.tempUnit??0).toString(),sensorUpdateInterval.value=t.sensorUpdateInterval??6e5,sensorThresholdTemp.value=t.thresholdTemp??0,sensorThresholdHumidity.value=t.thresholdHumidity??0,sensorThresholdPressure.value=t.thresholdPressure??0,sensorThresholdLight.value=t.thresholdLight??0,externalSetCheckbox.checked=Boolean(t.externalSensorSet),toggleExternalSensor(),externalSensorSelect.value=(t.externalSensor??0).toString(),combineSensorsCheckbox.checked=Boolean(t.combineSensors),buzzerSetCheckbox.checked=Boolean(t.buzzerSet),toggleBuzzerSet(),buzzerTuneSelect.value=(t.buzzerTune??0).toString(),buzzerOpeningCheckbox.checked=Boolean(t.buzzerOpening),buzzerClosingCheckbox.checked=Boolean(t.buzzerClosing),accessLoggingCheckbox.checked=Boolean(t.logAccess),logLevelSelect.value=(t.logLevel??0).toString()}catch(e){console.error("Error loading device settings:",e)}}function toggleExternalSensor(){externalSetCheckbox.checked?externalSensorGroup.style.display="block":externalSensorGroup.style.display="none"}function toggleBuzzerSet(){buzzerSetCheckbox.checked?buzzerGroup.style.display="block":buzzerGroup.style.display="none"}async function buzzerPlay(e){e.preventDefault();const t=buzzerTuneSelect.value,n=new URLSearchParams({tune:t});if(t>0)try{if(!(await fetch("/api/buzzer/play",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded",Authorization:savedToken},body:n})).ok)return void console.error("Play failed")}catch(e){console.error("Error playing tune: ",e)}else console.warn("No tune selected for buzzer play")}async function handleSave(e){e.preventDefault();const t=new URLSearchParams({name:deviceNameField.value,lang:deviceLanguageSelect.value,tempUnit:sensorUnitSelect.value,sensorUpdateInterval:sensorUpdateInterval.value,thresholdTemp:sensorThresholdTemp.value,thresholdHumidity:sensorThresholdHumidity.value,thresholdPressure:sensorThresholdPressure.value,thresholdLight:sensorThresholdLight.value,externalSensorSet:externalSetCheckbox.checked?"true":"false",externalSensor:externalSensorSelect.value,combineSensors:combineSensorsCheckbox.checked?"true":"false",buzzerSet:buzzerSetCheckbox.checked?"true":"false",buzzerTune:buzzerTuneSelect.value,buzzerOpening:buzzerOpeningCheckbox.checked?"true":"false",buzzerClosing:buzzerClosingCheckbox.checked?"true":"false",logAccess:accessLoggingCheckbox.checked?"true":"false",logLevel:logLevelSelect.value});try{if(!(await fetch("/api/settings/device",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded",Authorization:savedToken},body:t})).ok)return void console.error("Save failed");showSavedModal()}catch(e){console.error("Error saving device settings:",e)}}function showSavedModal(){modalSettingsSaved.show(),scrollToTop(),setTimeout((()=>{modalSettingsSaved.hide()}),3e3)}function scrollToTop(){window.scrollTo({top:0,behavior:"smooth"})}function showResetModal(){modalReset.show()}async function handleReset(){try{if(!(await fetch("/api/reset",{method:"POST",headers:{Authorization:savedToken}})).ok)return void console.error("Reset failed");modalReset.hide()}catch(e){console.error("Error resetting device:",e)}}function changeLanguage(){const e=deviceLanguageSelect.value;localStorage.setItem("lang",e),loadLanguage(e)}async function downloadDiagnose(e){e.preventDefault();const t=new JSZip,n=[{url:"/api/diagnose",name:"diagnostics.json"},{url:"/api/log/debug",name:"log.csv"},{url:"/api/log/access",name:"log-access.txt"}];for(const e of n){const n=await fetch(e.url);if(!n.ok){console.error(`Failed to fetch ${e.url}`);continue}const o=await n.blob();t.file(e.name,o)}const o=await t.generateAsync({type:"blob"}),r=document.createElement("a");r.href=URL.createObjectURL(o),r.download="PandaGarage-Diagnostics.zip",r.click(),URL.revokeObjectURL(r.href)}