let alertContainer,logAccessContainer,tableLogBody,noLogMessage,noLogMessageAccess,deleteDebugLogBtn,deleteAccessLogBtn;document.addEventListener("DOMContentLoaded",init);const savedToken=localStorage.getItem("token");async function init(){cacheElements(),bindEvents(),initializeView(),loadDebugLog()}function cacheElements(){alertContainer=document.getElementById("alert-log-deleted"),noLogMessage=document.getElementById("no-log"),tableLogBody=document.getElementById("table-log-body"),logAccessContainer=document.getElementById("container-log-access"),deleteDebugLogBtn=document.getElementById("btn-log-debug-delete"),deleteAccessLogBtn=document.getElementById("btn-log-access-delete"),noLogMessageAccess=document.getElementById("no-log-access")}function bindEvents(){deleteDebugLogBtn.addEventListener("click",deleteDebugLog),deleteAccessLogBtn.addEventListener("click",deleteAccessLog)}function initializeView(){alertContainer.style.display="none",noLogMessage.style.display="none",noLogMessageAccess.style.display="none","empty"==logAccessContainer.textContent&&(logAccessContainer.style.display="none",noLogMessageAccess.style.display="block")}function parseLogLine(e){const t=e.split(";",3),n=e.slice(t.join(";").length+1),o=n.startsWith('"')&&n.endsWith('"')?n.slice(1,-1).replace(/""/g,'"'):n;return[...t,o]}async function loadDebugLog(){try{const e=await fetch("/api/log/debug");if(!e.ok)throw new Error("Response was not ok");const t=await e.text();if(!t.trim())return void(noLogMessage.style.display="block");tableLogBody.innerHTML="";t.trim().split("\n").reverse().forEach((e=>{const[t,n,o,s]=parseLogLine(e);if(!t||!n||!o)return;const l=document.createElement("tr");l.innerHTML=`\n        <td>${t}</td>\n        <td><span class="badge ${["bg-secondary","bg-secondary","bg-info","bg-warning","bg-danger"][n]} fs-6 fw-normal">${["None","Debug","Info","Warning","Error"][n]}</span></td>\n        <td>${o}</td>\n        <td>${s}</td>\n      `,tableLogBody.appendChild(l)}))}catch(e){console.error("Failed to load log data:",e)}}async function deleteDebugLog(){deleteDebugLogBtn.disabled=!0;try{(await fetch("/api/log/debug",{method:"DELETE",headers:{Authorization:savedToken}})).ok&&(alertContainer.style.display="block",logDebugContainer.textContent="Debug Log file has been deleted.",setTimeout((()=>{alertContainer.style.display="none"}),5e3))}catch(e){console.error("Error deleting log:",e)}finally{deleteDebugLogBtn.disabled=!1}}async function deleteAccessLog(){deleteAccessLogBtn.disabled=!0;try{(await fetch("/api/log/access",{method:"DELETE",headers:{Authorization:savedToken}})).ok&&(alertContainer.style.display="block",logAccessContainer.textContent="Access Log file has been deleted.",setTimeout((()=>{alertContainer.style.display="none"}),5e3))}catch(e){console.error("Error deleting log:",e)}finally{deleteAccessLogBtn.disabled=!1}}